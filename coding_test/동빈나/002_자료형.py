# 자료형 -> 정수형, 실수형, 복소수형, 문자열, 리스트, 튜플, 사전

# 정수형 : 양의 정수, 음의 정수, 0

# 실수형 : 소수점을 붙인 수를 대입하면 실수형 변수로 처리
a = 5.
b =-.7
print(a, b) # 5.0 -0.7

# 지수표현 방식 -> 실수형으로 표현됨
print(1e9) # 1000000000.0
print(3954e-3) # 3.954

# 실수형을 저장하기 위해 4바이트 혹은 8바이트의 고정된 크기에 메모리 할당
# 그러히에 정확도의 한계를 가진다
# 10진수에는 0.3+0.6 =0.9지만 2진수에서는 정확히 표현 불가
# 이럴때는 round() 함수를 이용하여 반올림해줌
a = 0.3 + 0.6
print(a) # 0.8999999999999999
if a ==0.9:
    print(True)
else:
    print(False) #False

a = 0.3 + 0.6
a = round(a, 4)
print(a) # 0.9
if a ==0.9:
    print(True)
else:
    print(False) #True

# 수 자료형의 연산
# 나누기연산자는 결과가 실수형으로 반환됨
# 나머지(%) 몫(//) 사용할때가 많다
# 거듭제곱 연산자(**)

# 리스트 자료형
n = 10
a = [0]*n
print(a)

# 리스트 컴프리헨션
array = [i for i in range(10)]
print(array) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
# 0부터 19까지의 수 중 홀수만
array = [i for i in range(20) if i%2==1]
print(array) # [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
# 2차원 리스트
array = [[0]*5 for _ in range(3)]
print(array) # [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

# 리스트 관련 기타 메서드
a = []
# a.append() # 리스트에 원소 하나 삽입
# a.sort() # 오름차순 정렬
# a.sort(reverse=True) # 내림차순
# a.reverse() # 리스트의 순소를 모두 뒤집는다
# a.insert('삽입할위치','삽입할 값') # 특정한 인덱스 위치에 원소 삽입
# a.count('특정값') # 특정값을 가지는 데이터의 개수를 셀 때
# a.remove('특정값') # 특정값을 갖는 원소를 제거, 값이 여러개면 하나만 제거
# 만약 특정 값을 모두 제거하려면?
a = [1,2,3,4,5,5,5]
remove_set ={3,5}
result = [ i for i in a if i not in remove_set]
print(result) # [1, 2, 4]

# 문자열
data = "Don't you know \"Python\"?" # 문자열 안에 따옴표는 역슬래쉬 이용
print(data) # Don't you know "Python"?
# 문자열에 대해서 인덱싱과 슬라이싱 가능 다만 변경은 불가능

# 튜플 자료형
# 한번 선언된 값을 변경할 수 없다
# 리스트는 대괄호 튜플은 소괄호를 이용
# 리스트에 비해 공간 효율적이다.
a = (1,2,3,4,5,6,7,8,9)
print(a[3]) # 4
print(a[1:4]) # (2, 3, 4)

# 튜플을 사용하면 좋은 경우
# 서로 다른 성질의 데이터를 묶어서 관리해야 할때
#  - 최단 경로 알고리즘에서 (비용, 노드번호)의 형태로 튜플자료형 사용
# 데이터의 나열을 해싱의 키 값으로 사용해야 할 때
#  - 튜플은 변경이 불가능하므로 리스트와 다르게 키 값으로 사용 가능
# 리스트보다 메모리를 효율적으로 사용해야 할 때

# 사전 자료형(딕셔너리)
# key와 value의 쌍을 데이터로 가지는 자료형
# 원하는 '변경 불가능한 자료형'을 키로 사용할 수 있다.
data = dict()
data['사과'] = 'Apple'
data['바나나'] = 'Banana'
data['코코넛'] = 'CoConut'
print(data) # {'사과': 'Apple', '바나나': 'Banana', '코코넛': 'CoConut'}
key_list = data.keys() # dict_keys(['사과', '바나나', '코코넛'])
value_list = data.values() # dict_values(['Apple', 'Banana', 'CoConut'])

# 집합자료형
# 중복허용 X, 순서 X
# 리스트 혹은 문자열을 이용해서 초기화
#  - 이 때 set()함수 사용
# 혹은 중괄호{}안에 각 원소를 콤파 기준으로 구분하여 삽입함으로써 초기화
# 데이터 조회 및 수정에 있어서 O(1)의 시간에 처리 가능

